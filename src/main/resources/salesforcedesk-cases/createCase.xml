<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!-- API Doc: http://dev.desk.com/API/cases/#create -->
<template name="createCase" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="customerId" description="The customerId"/>
    <parameter name="type"
               description="Type of the case. The possible case types are email, phone, qna, chat and twitter."/>
    <parameter name="messageDirection"
               description="Direction of the case. 'in' for coming into the agent or 'out' for sending out of the agent."/>
    <parameter name="messageBody" description="Body of the case message."/>
    <parameter name="messageSubject" description="Subject of the case message."/>
    <parameter name="messageLinksTopic"
               description="JSON object which containing topic URL and class to set as case message topic link."/>
    <parameter name="messageLinksBrands"
               description="JSON array which containing objects of bards URL and class to set as case message brands link."/>
    <parameter name="messageStatus" description="Staus of the case message."/>
    <parameter name="messageFrom" description="From name for the case message."/>
    <parameter name="messageTweetType" description="Tweet type of the message."/>
    <parameter name="messageTo" description="To name for the case message."/>
    <parameter name="messageCc" description="Email's cc address(es)."/>
    <parameter name="messageBcc" description="Email's bcc address(es)."/>
    <parameter name="subject" description="Subject of the case."/>
    <parameter name="priority" description="Priority of the case."/>
    <parameter name="status" description="Status of the case"/>
    <parameter name="labels" description="JSON arroy or a string to set label(s)."/>
    <parameter name="externalId" description="Unique external ID for the case."/>
    <parameter name="description" description="Description of the case."/>
    <parameter name="language" description="ISO language code to set case Language."/>
    <parameter name="customFields"
               description="JSON object which containing customfield keys and values."/>
    <parameter name="createdAt" description="Custom date time for the case created date."/>
    <parameter name="lockedUntil" description="Date time to set the case locked until date."/>
    <parameter name="linksCustomer"
               description="JSON object which containing customer's URL and class to set as case customer link."/>
    <parameter name="linksAssignedGroup"
               description="JSON object which containing group URL and class to set as case assigned group link."/>
    <parameter name="linksAssignedUser"
               description="JSON object which containing user's URL and class to set as case assigned user link."/>
    <parameter name="linksLockedBy"
               description="JSON object which containing user's URL and class to set as case locked user link."/>
    <parameter name="linksEnteredBy"
               description="JSON object which containing user's URL and class to set as case entered user link."/>
    <sequence>
        <property name="uri.var.customerId" expression="$func:customerId"/>
        <property name="uri.var.type" expression="$func:type"/>
        <property name="uri.var.messageDirection" expression="$func:messageDirection"/>
        <property name="uri.var.messageBody" expression="$func:messageBody"/>
        <property name="uri.var.messageSubject" expression="$func:messageSubject"/>
        <property name="uri.var.messageLinksTopic" expression="$func:messageLinksTopic"/>
        <property name="uri.var.messageLinksBrands" expression="$func:messageLinksBrands"/>
        <property name="uri.var.messageStatus" expression="$func:messageStatus"/>
        <property name="uri.var.messageFrom" expression="$func:messageFrom"/>
        <property name="uri.var.messageTo" expression="$func:messageTo"/>
        <property name="uri.var.messageCc" expression="$func:messageCc"/>
        <property name="uri.var.messageBcc" expression="$func:messageBcc"/>
        <property name="uri.var.messageTweetType" expression="$func:messageTweetType"/>
        <property name="uri.var.subject" expression="$func:subject"/>
        <property name="uri.var.priority" expression="$func:priority"/>
        <property name="uri.var.status" expression="$func:status"/>
        <property name="uri.var.labels" expression="$func:labels"/>
        <property name="uri.var.externalId" expression="$func:externalId"/>
        <property name="uri.var.description" expression="$func:description"/>
        <property name="uri.var.language" expression="$func:language"/>
        <property name="uri.var.customFields" expression="$func:customFields"/>
        <property name="uri.var.createdAt" expression="$func:createdAt"/>
        <property name="uri.var.lockedUntil" expression="$func:lockedUntil"/>
        <property name="uri.var.linksCustomer" expression="$func:linksCustomer"/>
        <property name="uri.var.linksAssignedGroup" expression="$func:linksAssignedGroup"/>
        <property name="uri.var.linksAssignedUser" expression="$func:linksAssignedUser"/>
        <property name="uri.var.linksLockedBy" expression="$func:linksLockedBy"/>
        <property name="uri.var.linksEnteredBy" expression="$func:linksEnteredBy"/>
        <payloadFactory media-type="json">
            <format>
                {
                "type":"$1",
                "message":{
                "direction":"$2"
                }
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.type')"/>
                <arg expression="get-property('uri.var.messageDirection')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
            var jsonPayload=mc.getPayloadJSON();
            var messageBody=mc.getProperty("uri.var.messageBody");
            var messageSubject=mc.getProperty("uri.var.messageSubject");
            var messageLinksTopic=mc.getProperty("uri.var.messageLinksTopic");
            var messageLinksBrands=mc.getProperty("uri.var.messageLinksBrands");
            var messageStatus=mc.getProperty("uri.var.messageStatus");
            var messageFrom=mc.getProperty("uri.var.messageFrom");
            var messageTo=mc.getProperty("uri.var.messageTo");
            var messageCc=mc.getProperty("uri.var.messageCc");
            var messageBcc=mc.getProperty("uri.var.messageBcc");
            var messageTweetType=mc.getProperty("uri.var.messageTweetType");
            var subject=mc.getProperty("uri.var.subject");
            var priority=mc.getProperty("uri.var.priority");
            var status=mc.getProperty("uri.var.status");
            var labels=mc.getProperty("uri.var.labels");
            var externalId=mc.getProperty("uri.var.externalId");
            var description=mc.getProperty("uri.var.description");
            var language=mc.getProperty("uri.var.language");
            var customFields=mc.getProperty("uri.var.customFields");
            var createdAt=mc.getProperty("uri.var.createdAt");
            var lockedUntil=mc.getProperty("uri.var.lockedUntil");
            var linksCustomer=mc.getProperty("uri.var.linksCustomer");
            var linksAssignedGroup=mc.getProperty("uri.var.linksAssignedGroup");
            var linksLockedBy=mc.getProperty("uri.var.linksLockedBy");
            var linksEnteredBy=mc.getProperty("uri.var.linksEnteredBy");
            var linksAssignedUser=mc.getProperty("uri.var.linksAssignedUser");
            var links={};
            var hasLinks=false;
            var messageLinks={};
            var hasMessageLinks=false;
            if(messageBody!=null && messageBody!=""){
               jsonPayload.message.body=messageBody;
            }
            if(messageSubject!=null && messageSubject!=""){
               jsonPayload.message.subject=messageSubject;
            }
            if(messageLinksTopic!=null && messageLinksTopic!=""){
               messageLinks.topic=eval('(' + messageLinksTopic + ')');
               hasMessageLinks=true;
            }
            if(messageLinksBrands!=null && messageLinksBrands!=""){
               messageLinks.brands=eval('(' + messageLinksBrands + ')');
               hasMessageLinks=true;
            }
            if(hasMessageLinks==true){
               jsonPayload.message._links=messageLinks;
            }
            if(messageStatus!=null && messageStatus!=""){
               jsonPayload.message.status=messageStatus;
            }
            if(messageFrom!=null && messageFrom!=""){
               jsonPayload.message.from=messageFrom;
            }
            if(messageTo!=null && messageTo!=""){
               jsonPayload.message.to=messageTo;
            }
            if(messageCc!=null && messageCc!=""){
               jsonPayload.message.cc=messageCc;
            }
            if(messageBcc!=null && messageBcc!=""){
               jsonPayload.message.bcc=messageBcc;
            }
            if(messageTweetType!=null && messageTweetType!=""){
               jsonPayload.message.tweet_type=messageTweetType;
            }
            if(subject!=null && subject!=""){
               jsonPayload.subject=subject;
            }
            if(priority!=null && priority!=""){
               jsonPayload.priority=priority;
            }
            if(status!=null && status!=""){
               jsonPayload.status=status;
            }
            if(labels!=null && labels!=""){
               if(labels.charCodeAt(0) == '91'){
                  jsonPayload.labels=eval('(' + labels + ')');
               }else{
                  jsonPayload.labels=labels;
               }
            }
            if(externalId!=null && externalId!=""){
               jsonPayload.external_id=externalId;
            }
            if(description!=null && description!=""){
               jsonPayload.description=description;
            }
            if(language!=null && language!=""){
               jsonPayload.language=language;
            }
            if(customFields!=null && customFields!=""){
               jsonPayload.custom_fields=eval('(' + customFields + ')');
            }
            if(createdAt!=null && createdAt!=""){
               jsonPayload.created_at=createdAt;
            }
            if(lockedUntil!=null && lockedUntil!=""){
               jsonPayload.locked_until=lockedUntil;
            }
            if(linksCustomer!=null && linksCustomer!=""){
               links.customer=eval('(' + linksCustomer + ')');
               hasLinks=true;
            }
            if(linksAssignedGroup!=null && linksAssignedGroup!=""){
               links.assigned_group=eval('(' + linksAssignedGroup + ')');
               hasLinks=true;
            }
            if(linksLockedBy!=null && linksLockedBy!=""){
               links.locked_by=eval('(' + linksLockedBy + ')');
               hasLinks=true;
            }
            if(linksEnteredBy!=null && linksEnteredBy!=""){
               links.entered_by=eval('(' + linksEnteredBy + ')');
               hasLinks=true;
            }
            if(linksAssignedUser!=null && linksAssignedUser!=""){
               links.assigned_user=eval('(' + linksAssignedUser + ')');
               hasLinks=true;
            }
            if(hasLinks == true){
               jsonPayload._links = links;
            }
            mc.setPayloadJSON(jsonPayload);      
            var urlQuery = ''+mc.getProperty("uri.var.urlQuery");
            // Add a leading '?' and remove the trailing '&'
            if(urlQuery!=""){
               urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
               mc.setProperty('uri.var.urlQuery', urlQuery);                               
            }                                     
         ]]>
        </script>
        <filter source="boolean(get-property('uri.var.customerId'))" regex="true">
            <then>
                <call>
                    <endpoint>
                        <http method="post"
                              uri-template="{+uri.var.apiUrl}/customers/{+uri.var.customerId}/cases{+uri.var.urlQuery}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="post"
                              uri-template="{+uri.var.apiUrl}/cases{+uri.var.urlQuery}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
        <!-- Remove custom Headers from the API Response -->
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Limit" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Remaining" action="remove" scope="transport"/>
        <header name="X-Request-Id" action="remove" scope="transport"/>
        <header name="X-Rack-Cache" action="remove" scope="transport"/>
        <header name="Status" action="remove" scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Reset" action="remove" scope="transport"/>
        <header name="X-AppVersion" action="remove" scope="transport"/>
        <header name="X-Powered-By" action="remove" scope="transport"/>
    </sequence>
</template>