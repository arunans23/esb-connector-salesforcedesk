<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!-- Method Documentation URL: http://dev.desk.com/API/customers/#create -->
<template name="createCustomer" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="firstName" description="The first name of the customer."/>
    <parameter name="lastName" description="The last name of the customer."/>
    <parameter name="company" description="The company of the customer."/>
    <parameter name="title" description="The title of the customer."/>
    <parameter name="externalId"
               description="The unique external identifier to reference this customer to an external system."/>
    <parameter name="background" description="Any background information for the customer."/>
    <parameter name="language"
               description="The customer's language code, nil unless multi-lingual support is enabled."/>
    <parameter name="lockedUntil"
               description="The time in which the lock on this customer will expire."/>
    <parameter name="customFields"
               description="An object contains the hash of values for custom fields."/>
    <parameter name="emails"
               description="The array of email objects, each specifying the contact type and value of the email address."/>
    <parameter name="phoneNumbers"
               description="The array of phone number objects, each specifying the contact type and value of the phone number."/>
    <parameter name="addresses"
               description="Array of address objects, each specifying the contact type and value of the location."/>
    <parameter name="accessPrivatePortal"
               description="Whether or not customer can access private portal."/>
    <parameter name="accessCompanyCases"
               description="Whether or not customer can access company cases."/>
    <parameter name="avatarSize"
               description="If provided, for Facebook and Gravatar, the returned avatar URL will have a square image with width and height equal to the given value."/>
    <parameter name="avatar"
               description="customer's avatar URL - image sourced from Twitter, Facebook or Gravatar."/>
    <parameter name="linksLockedBy"
               description="Indicates that the customer is locked to the given user."/>
    <parameter name="linksCompany"
               description="The link to the company for which this customer will be assigned."/>
    <sequence>
        <property name="uri.var.firstName" expression="$func:firstName"/>
        <property name="uri.var.lastName" expression="$func:lastName"/>
        <property name="uri.var.company" expression="$func:company"/>
        <property name="uri.var.title" expression="$func:title"/>
        <property name="uri.var.externalId" expression="$func:externalId"/>
        <property name="uri.var.background" expression="$func:background"/>
        <property name="uri.var.language" expression="$func:language"/>
        <property name="uri.var.lockedUntil" expression="$func:lockedUntil"/>
        <property name="uri.var.customFields" expression="$func:customFields"/>
        <property name="uri.var.emails" expression="$func:emails"/>
        <property name="uri.var.phoneNumbers" expression="$func:phoneNumbers"/>
        <property name="uri.var.addresses" expression="$func:addresses"/>
        <property name="uri.var.accessPrivatePortal" expression="$func:accessPrivatePortal"/>
        <property name="uri.var.accessCompanyCases" expression="$func:accessCompanyCases"/>
        <property name="uri.var.avatarSize" expression="$func:avatarSize"/>
        <property name="uri.var.avatar" expression="$func:avatar"/>
        <property name="uri.var.linksLockedBy" expression="$func:linksLockedBy"/>
        <property name="uri.var.linksCompany" expression="$func:linksCompany"/>
        <script language="js">
            <![CDATA[
            var firstName = mc.getProperty('uri.var.firstName');
            var lastName = mc.getProperty('uri.var.lastName');
            var company = mc.getProperty('uri.var.company');
            var title = mc.getProperty('uri.var.title');
            var externalId = mc.getProperty('uri.var.externalId');
            var background = mc.getProperty('uri.var.background');
            var language = mc.getProperty('uri.var.language');
            var lockedUntil = mc.getProperty('uri.var.lockedUntil');
            var customFields = mc.getProperty('uri.var.customFields');
            var emails = mc.getProperty('uri.var.emails');
            var phoneNumbers = mc.getProperty('uri.var.phoneNumbers');
            var addresses = mc.getProperty('uri.var.addresses');
            var accessPrivatePortal = mc.getProperty('uri.var.accessPrivatePortal');
            var accessCompanyCases = mc.getProperty('uri.var.accessCompanyCases');
            var avatarSize = mc.getProperty('uri.var.avatarSize');
            var avatar = mc.getProperty('uri.var.avatar');
            var linksLockedBy = mc.getProperty('uri.var.linksLockedBy');
            var linksCompany = mc.getProperty('uri.var.linksCompany');
            var urlQuery = ''+ mc.getProperty('uri.var.urlQuery');
            var jsonPayload = {};
            var links = {};
            var hasLinks = false;
            //Setting optional parameters to the payload.
            if (firstName != null && firstName != "") {
                jsonPayload.first_name = firstName;
            }
            if (lastName != null && lastName != "") {
                jsonPayload.last_name = lastName;
            }
            if (company != null && company != "") {
                jsonPayload.company = company;
            }
            if (title != null && title != "") {
                jsonPayload.title = title;
            }
            if (externalId != null && externalId != "") {
                jsonPayload.external_id = externalId;
            }
            if (background != null && background != "") {
                jsonPayload.background = background;
            }
            if (language != null && language != "") {
                jsonPayload.language = language;
            }
            if (lockedUntil != null && lockedUntil != "") {
                jsonPayload.locked_until = lockedUntil;
            }
            if (customFields != null && customFields != "") {
                jsonPayload.custom_fields = eval("(" + customFields + ")");
            }
            if (emails != null && emails != "") {
                jsonPayload.emails = eval("(" + emails + ")");
            }
            if (phoneNumbers != null && phoneNumbers != "") {
                jsonPayload.phone_numbers = eval("(" + phoneNumbers + ")");
            }
            if (addresses != null && addresses != "") {
                jsonPayload.addresses = eval("(" + addresses + ")");
            }
            if (accessPrivatePortal != null && accessPrivatePortal != "") {
                jsonPayload.access_private_portal = accessPrivatePortal;
            }
            if (accessCompanyCases != null && accessCompanyCases != "") {
                jsonPayload.access_company_cases = accessCompanyCases;
            }
            if (avatarSize != null && avatarSize != "") {
                jsonPayload.avatar_size = avatarSize;
            }
            if (avatar != null && avatar != "") {
                jsonPayload.avatar = avatar;
            }
            if (linksLockedBy != null && linksLockedBy != "") {
                links.locked_by = eval("(" + linksLockedBy + ")");
                hasLinks = true;
            }
            if (linksCompany != null && linksCompany != "") {
                links.company = eval("(" + linksCompany + ")");
                hasLinks = true;
            }
            if (hasLinks == true) {
                jsonPayload._links = links;
            }
            // Add a leading '?' and remove the trailing '&'
            if (urlQuery != "") {
                urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
                mc.setProperty('uri.var.urlQuery', urlQuery);
            }
            mc.setPayloadJSON(jsonPayload);  
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="post" uri-template="{+uri.var.apiUrl}/customers{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Limit" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Remaining" action="remove" scope="transport"/>
        <header name="X-Request-Id" action="remove" scope="transport"/>
        <header name="X-Rack-Cache" action="remove" scope="transport"/>
        <header name="Status" action="remove" scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Reset" action="remove" scope="transport"/>
        <header name="X-AppVersion" action="remove" scope="transport"/>
        <header name="X-Powered-By" action="remove" scope="transport"/>
    </sequence>
</template>