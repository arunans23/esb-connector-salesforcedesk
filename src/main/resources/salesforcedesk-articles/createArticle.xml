<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!-- API Doc: http://dev.desk.com/API/articles/#create -->
<template name="createArticle" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="subject" description="The subject of the article."/>
    <parameter name="linksTopic"
               description="JSON object with topic href and class attributes to link with the article."/>
    <parameter name="articleBody" description="The content of the article (HTML formatted)."/>
    <parameter name="bodyEmail" description="Email specific content."/>
    <parameter name="bodyEmailAuto"
               description="Boolean value to use email specific content from body."/>
    <parameter name="bodyChat" description="Chat specific content."/>
    <parameter name="bodyChatAuto"
               description="Boolean value to use chat specific content from body."/>
    <parameter name="bodyWebCallback" description="The web callback specific content."/>
    <parameter name="bodyWebCallbackAuto"
               description="Boolean value to use web callback specific content from body."/>
    <parameter name="bodyTwitter" description="Twitter specific content."/>
    <parameter name="bodyTwitterAuto"
               description="Boolean value to use Twitter specific content from body."/>
    <parameter name="bodyQna" description="QNA specific content."/>
    <parameter name="bodyQnaAuto"
               description="Boolean value to use QNA specific content from body."/>
    <parameter name="bodyPhone" description="Phone specific content."/>
    <parameter name="bodyPhoneAuto"
               description="Boolean value to use phone specific content from body."/>
    <parameter name="bodyFacebook" description="Facebook specific content."/>
    <parameter name="bodyFacebookAuto"
               description="Boolean value to use Facebook specific content from body."/>
    <parameter name="keywords"
               description="Sting Array or a single string of Keywords for the article."/>
    <parameter name="quickcode" description="Unique quick code for the article."/>
    <parameter name="publishAt" description="The article published date and time."/>
    <parameter name="updatedAt" description="Custom date time for the article updated date."/>
    <parameter name="createdAt" description="Custom date time for the article created date."/>
    <parameter name="inSupportCenter"
               description="Boolean value to display the article in the support center."/>
    <parameter name="internalNotes" description="The internal notes for the article."/>
    <sequence>
        <property name="uri.var.subject" expression="$func:subject"/>
        <property name="uri.var.linksTopic" expression="$func:linksTopic"/>
        <property name="uri.var.articleBody" expression="$func:articleBody"/>
        <property name="uri.var.bodyEmail" expression="$func:bodyEmail"/>
        <property name="uri.var.bodyEmailAuto" expression="$func:bodyEmailAuto"/>
        <property name="uri.var.bodyChat" expression="$func:bodyChat"/>
        <property name="uri.var.bodyChatAuto" expression="$func:bodyChatAuto"/>
        <property name="uri.var.bodyWebCallback" expression="$func:bodyWebCallback"/>
        <property name="uri.var.bodyWebCallbackAuto" expression="$func:bodyWebCallbackAuto"/>
        <property name="uri.var.bodyTwitter" expression="$func:bodyTwitter"/>
        <property name="uri.var.bodyTwitterAuto" expression="$func:bodyTwitterAuto"/>
        <property name="uri.var.bodyQna" expression="$func:bodyQna"/>
        <property name="uri.var.bodyQnaAuto" expression="$func:bodyQnaAuto"/>
        <property name="uri.var.bodyPhone" expression="$func:bodyPhone"/>
        <property name="uri.var.bodyPhoneAuto" expression="$func:bodyPhoneAuto"/>
        <property name="uri.var.bodyFacebook" expression="$func:bodyFacebook"/>
        <property name="uri.var.bodyFacebookAuto" expression="$func:bodyFacebookAuto"/>
        <property name="uri.var.keywords" expression="$func:keywords"/>
        <property name="uri.var.quickcode" expression="$func:quickcode"/>
        <property name="uri.var.publishAt" expression="$func:publishAt"/>
        <property name="uri.var.updatedAt" expression="$func:updatedAt"/>
        <property name="uri.var.createdAt" expression="$func:createdAt"/>
        <property name="uri.var.inSupportCenter" expression="$func:inSupportCenter"/>
        <property name="uri.var.internalNotes" expression="$func:internalNotes"/>
        <payloadFactory media-type="json">
            <format>
                {
                "subject":"$1",
                "_links": {
                "topic": $2
                }
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.subject')"/>
                <arg expression="get-property('uri.var.linksTopic')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
            var urlQuery = ''+mc.getProperty("uri.var.urlQuery");
            var articleBody= mc.getProperty("uri.var.articleBody");
            var bodyEmail= mc.getProperty("uri.var.bodyEmail");
            var bodyEmailAuto= mc.getProperty("uri.var.bodyEmailAuto");
            var bodyChat= mc.getProperty("uri.var.bodyChat");
            var bodyChatAuto= mc.getProperty("uri.var.bodyChatAuto");
            var bodyWebCallback= mc.getProperty("uri.var.bodyWebCallback");
            var bodyWebCallbackAuto= mc.getProperty("uri.var.bodyWebCallbackAuto");
            var bodyTwitter= mc.getProperty("uri.var.bodyTwitter");
            var bodyTwitterAuto= mc.getProperty("uri.var.bodyTwitterAuto");
            var bodyQna= mc.getProperty("uri.var.bodyQna");
            var bodyQnaAuto= mc.getProperty("uri.var.bodyQnaAuto");
            var bodyPhone= mc.getProperty("uri.var.bodyPhone");
            var bodyPhoneAuto= mc.getProperty("uri.var.bodyPhoneAuto");
            var bodyFacebook= mc.getProperty("uri.var.bodyFacebook");
            var bodyFacebookAuto= mc.getProperty("uri.var.bodyFacebookAuto");
            var keywords= mc.getProperty("uri.var.keywords");
            var quickcode= mc.getProperty("uri.var.quickcode");
            var publishAt= mc.getProperty("uri.var.publishAt");
            var updatedAt= mc.getProperty("uri.var.updatedAt");
            var createdAt= mc.getProperty("uri.var.createdAt");
            var inSupportCenter= mc.getProperty("uri.var.inSupportCenter");
            var internalNotes= mc.getProperty("uri.var.internalNotes");
            var jsonPayload=mc.getPayloadJSON();
            if(articleBody!=null && articleBody!=""){
               jsonPayload.body=articleBody;
            }
            if(bodyEmail!=null && bodyEmail!=""){
               jsonPayload.body_email=bodyEmail;
            }
            if(bodyEmailAuto!=null && bodyEmailAuto!=""){
               jsonPayload.body_email_auto=bodyEmailAuto;
            }
            if(bodyChat!=null && bodyChat!=""){
               jsonPayload.body_chat=bodyChat;
            }
            if(bodyChatAuto!=null && bodyChatAuto!=""){
               jsonPayload.body_chat_auto=bodyChatAuto;
            }
            if(bodyWebCallback!=null && bodyWebCallback!=""){
               jsonPayload.body_web_callback=bodyWebCallback;
            }
            if(bodyWebCallbackAuto!=null && bodyWebCallbackAuto!=""){
               jsonPayload.body_web_callback_auto=bodyWebCallbackAuto;
            }
            if(bodyTwitter!=null && bodyTwitter!=""){
               jsonPayload.body_twitter=bodyTwitter;
            }
            if(bodyTwitterAuto!=null && bodyTwitterAuto!=""){
               jsonPayload.body_twitter_auto=bodyTwitterAuto;
            }
            if(bodyQna!=null && bodyQna!=""){
               jsonPayload.body_qna=bodyQna;
            }
            if(bodyQnaAuto!=null && bodyQnaAuto!=""){
               jsonPayload.body_qna_auto=bodyQnaAuto;
            }
            if(bodyPhone!=null && bodyPhone!=""){
               jsonPayload.body_phone=bodyPhone;
            }
            if(bodyPhoneAuto!=null && bodyPhoneAuto!=""){
               jsonPayload.body_phone_auto=bodyPhoneAuto;
            }
            if(bodyFacebook!=null && bodyFacebook!=""){
               jsonPayload.body_facebook=bodyFacebook;
            }
            if(bodyFacebookAuto!=null && bodyFacebookAuto!=""){
               jsonPayload.body_facebook_auto=bodyFacebookAuto;
            }
            if(bodyFacebookAuto!=null && bodyFacebookAuto!=""){
               jsonPayload.body_facebook_auto=bodyFacebookAuto;
            }
            if(keywords!=null && keywords!=""){
               if(keywords.charCodeAt(0) == '91'){
                  jsonPayload.keywords=eval('(' + keywords + ')');
               }else{
                  jsonPayload.keywords=keywords;
               }
            }
            if(quickcode!=null && quickcode!=""){
               jsonPayload.quickcode=quickcode;
            }
            if(publishAt!=null && publishAt!=""){
               jsonPayload.publish_at=publishAt;
            }
            if(updatedAt!=null && updatedAt!=""){
               jsonPayload.updated_at=updatedAt;
            }
            if(createdAt!=null && createdAt!=""){
               jsonPayload.created_at=createdAt;
            }
            if(inSupportCenter!=null && inSupportCenter!=""){
               jsonPayload.in_support_center=inSupportCenter;
            }
            if(internalNotes!=null && internalNotes!=""){
               jsonPayload.internal_notes=internalNotes;
            }
            mc.setPayloadJSON(jsonPayload);
            // Add a leading '?' and remove the trailing '&'
            if(urlQuery!=""){
               urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
               mc.setProperty('uri.var.urlQuery', urlQuery);                               
            }                                     
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="post" uri-template="{+uri.var.apiUrl}/articles{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Limit" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Remaining" action="remove" scope="transport"/>
        <header name="X-Request-Id" action="remove" scope="transport"/>
        <header name="X-Rack-Cache" action="remove" scope="transport"/>
        <header name="Status" action="remove" scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Reset" action="remove" scope="transport"/>
        <header name="X-AppVersion" action="remove" scope="transport"/>
        <header name="X-Powered-By" action="remove" scope="transport"/>
    </sequence>
</template>